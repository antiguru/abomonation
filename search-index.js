var N = null;var searchIndex = {};
searchIndex["abomonation"]={"doc":"Abomonation (spelling intentional) is a fast serialization / deserialization crate.","items":[[5,"encode","abomonation","Encodes a typed reference into a binary buffer.",N,[[["t"],["w"]],["ioresult"]]],[5,"decode","","Decodes a mutable binary slice into an immutable typed reference.",N,N],[5,"measure","","Reports the number of bytes required to encode `self`.",N,[[["t"]],["usize"]]],[0,"abomonated","","",N,N],[3,"Abomonated","abomonation::abomonated","A type wrapping owned decoded abomonated data.",N,N],[11,"new","","Attempts to create decoded data from owned mutable bytes.",0,[[["s"]],["option"]]],[11,"as_bytes","","",0,N],[11,"deref","","",0,[[["self"]],["t"]]],[8,"Abomonation","abomonation","Abomonation provides methods to serialize any heap data the implementor owns.",N,N],[11,"entomb","","Write any additional information about `&self` beyond its binary representation.",1,[[["self"],["w"]],["ioresult"]]],[11,"exhume","","Recover any information for `&mut self` not evident from its binary representation.",1,N],[11,"extent","","Reports the number of further bytes required to entomb `self`.",1,[[["self"]],["usize"]]],[14,"unsafe_abomonate","","The `unsafe_abomonate!` macro takes a type name with an optional list of fields, and implements `Abomonation` for the type, following the pattern of the tuple implementations: each method calls the equivalent method on each of its fields.",N,N]],"paths":[[3,"Abomonated"],[8,"Abomonation"]]};
initSearch(searchIndex);
